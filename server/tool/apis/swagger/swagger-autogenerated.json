{
  "swagger": "2.0",
  "info": {
    "description": "Create APIs at the speed of your thoughts",
    "version": "1.0.0",
    "title": "XgeneCloud",
    "contact": {}
  },
  "host": "localhost:8080",
  "basePath": "/",
  "tags": [
    {
      "name": "common"
    },
    {
      "name": "Authentication",
      "description": "Everything about User Authentication"
    },
    {
      "name": "ManufacturerHasManyProduct",
      "description": "Everything about has many relation"
    },
    {
      "name": "Manufacturer",
      "description": "Everything about your Manufacturer"
    },
    {
      "name": "ProductBelongsToManufacturer",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "ProductBelongsToProductGroup",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "ProductBelongsToProductType",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "ProductBelongsToUsers",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "ProductHasManyProductShop",
      "description": "Everything about has many relation"
    },
    {
      "name": "Product",
      "description": "Everything about your Product"
    },
    {
      "name": "ProductGroupHasManyProduct",
      "description": "Everything about has many relation"
    },
    {
      "name": "ProductGroup",
      "description": "Everything about your ProductGroup"
    },
    {
      "name": "ProductShopBelongsToProduct",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "ProductShopBelongsToShops",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "ProductShop",
      "description": "Everything about your ProductShop"
    },
    {
      "name": "ProductTypeHasManyProduct",
      "description": "Everything about has many relation"
    },
    {
      "name": "ProductType",
      "description": "Everything about your ProductType"
    },
    {
      "name": "ShopsHasManyProductShop",
      "description": "Everything about has many relation"
    },
    {
      "name": "Shops",
      "description": "Everything about your Shops"
    },
    {
      "name": "UsersHasManyProduct",
      "description": "Everything about has many relation"
    },
    {
      "name": "Users",
      "description": "Everything about your Users"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "common"
        ],
        "summary": "Get server health",
        "description": "",
        "operationId": "health",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "process_uptime": "282.6 Seconds",
                "process_memory_usage": {
                  "rss": "46.73 MB",
                  "heapTotal": "24.62 MB",
                  "heapUsed": "19.74 MB",
                  "external": "1.59 MB"
                },
                "os_total_memory": "16384.00 MB",
                "os_free_memory": "826.23 MB",
                "os_load_average": [
                  "3.51",
                  "3.36",
                  "3.24"
                ],
                "v8_heap_statistics": {
                  "total_heap_size": "24.62 MB",
                  "total_heap_size_executable": "0.80 MB",
                  "total_physical_size": "22.25 MB",
                  "total_available_size": "2075.67 MB",
                  "used_heap_size": "19.75 MB",
                  "heap_size_limit": "2096.00 MB",
                  "malloced_memory": "0.09 MB",
                  "peak_malloced_memory": "10.10 MB",
                  "does_zap_garbage": 0,
                  "number_of_native_contexts": 2,
                  "number_of_detached_contexts": 0
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/signin": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User login",
        "description": "",
        "operationId": "login",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Authentication user details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userAuth"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authenticated successfully",
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        }
      }
    },
    "/api/v1/auth/signup": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User signup",
        "description": "",
        "operationId": "signup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Signup user details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registration success",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/auth/signout": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "User logout",
        "description": "",
        "operationId": "logout",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logout success"
          }
        }
      }
    },
    "/api/v1/auth/password/forgot": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Password Forgot",
        "description": "",
        "operationId": "passwordForgot",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Signup user details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "required": true,
                  "example": "test@xgenecloud.com"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registration success",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/auth/email/validate/{tokenId}": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Email validate link",
        "description": "",
        "operationId": "emailValidate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "random token id received",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Validated successfully"
          }
        }
      }
    },
    "/api/v1/auth/token/validate/{tokenId}": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Validate password reset token",
        "description": "",
        "operationId": "passwordResetTokenValidate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "random token id received",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Validated successfully"
          }
        }
      }
    },
    "/api/v1/auth/password/reset/": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Password reset",
        "description": "",
        "operationId": "passwordReset",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "random token id received",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Reset password details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "password": {
                  "type": "string",
                  "format": "password",
                  "example": "password",
                  "required": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset successfully"
          }
        }
      }
    },
    "/api/v1/user/me": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "USer details",
        "description": "",
        "operationId": "userDetails",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User details"
          }
        }
      }
    },
    "/api/v1/user": {
      "put": {
        "tags": [
          "Authentication"
        ],
        "summary": "Update user details",
        "description": "",
        "operationId": "updateUserDetails",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User details"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Updated user details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ]
      }
    },
    "/api/v1/user/password/change": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Update user details",
        "description": "",
        "operationId": "passwordChange",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User details"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Current password and new password",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "currentPassword": {
                  "type": "string",
                  "format": "password",
                  "example": "password"
                },
                "newPassword": {
                  "type": "string",
                  "format": "password",
                  "example": "newPassword"
                }
              }
            }
          }
        ]
      }
    },
    "/api/v1/auth/google": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Google authentication url",
        "description": "",
        "operationId": "googleAuthentication"
      }
    },
    "/api/v1/auth/facebook": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Facebook authentication url",
        "description": "",
        "operationId": "facebookAuthentication"
      }
    },
    "/api/v1/auth/google/callback": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Google authentication callback url",
        "description": "",
        "operationId": "googleAuthenticationCallback"
      }
    },
    "/api/v1/auth/facebook/callback": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Facebook authentication callback url",
        "description": "",
        "operationId": "facebookAuthenticationCallback"
      }
    },
    "/api/v1/Manufacturer/has/Product": {
      "get": {
        "tags": [
          "ManufacturerHasManyProduct"
        ],
        "summary": "Get Manufacturer list with Product children",
        "description": "",
        "operationId": "ManufacturerHasManyProductList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/Manufacturer/{ManufacturerId}/Product": {
      "get": {
        "tags": [
          "ManufacturerHasManyProduct"
        ],
        "summary": "Find Product list by parent Manufacturer id",
        "description": "Returns a single Manufacturer",
        "operationId": "getProductByManufacturerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ManufacturerId",
            "in": "path",
            "description": "ID of Manufacturer to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Manufacturer not found"
          }
        }
      },
      "post": {
        "tags": [
          "ManufacturerHasManyProduct"
        ],
        "summary": "Insert Product under a parent Manufacturer",
        "description": "Returns a single Manufacturer",
        "operationId": "insertProductByManufacturerId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "ManufacturerId",
            "in": "path",
            "description": "ID of Manufacturer to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/Manufacturer/{ManufacturerId}/Product/{ProductId}": {
      "get": {
        "tags": [
          "ManufacturerHasManyProduct"
        ],
        "summary": "Get by Product id parent Manufacturer id",
        "description": "Returns a single Manufacturer",
        "operationId": "getProductByIdAndManufacturerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ManufacturerId",
            "in": "path",
            "description": "ID of parent Manufacturer",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of Product",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ManufacturerHasManyProduct"
        ],
        "summary": "Delete by Product id parent Manufacturer id",
        "description": "Returns a single Manufacturer",
        "operationId": "deleteProductByIdAndManufacturerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ManufacturerId",
            "in": "path",
            "description": "ID of parent Manufacturer",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of cProduct",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "ManufacturerHasManyProduct"
        ],
        "summary": "Update Product under a parent Manufacturer",
        "description": "Returns a single Manufacturer",
        "operationId": "updateProductByIdAndManufacturerId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "ManufacturerId",
            "in": "path",
            "description": "ID of Manufacturer to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of Product",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/Manufacturer/{ManufacturerId}/Product/{ProductId}/exists": {
      "get": {
        "tags": [
          "ManufacturerHasManyProduct"
        ],
        "summary": "Check row exists by Product id and parent Manufacturer id",
        "description": "",
        "operationId": "existsProductByIdAndManufacturerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ManufacturerId",
            "in": "path",
            "description": "ID of parent Manufacturer",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of Product",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/Manufacturer/{ManufacturerId}/Product/findOne": {
      "get": {
        "tags": [
          "ManufacturerHasManyProduct"
        ],
        "summary": "Find one Product by parent Manufacturer id and filters",
        "description": "",
        "operationId": "findOneProductByManufacturerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ManufacturerId",
            "in": "path",
            "description": "ID of parent Manufacturer",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/Manufacturer/{ManufacturerId}/Product/count": {
      "get": {
        "tags": [
          "ManufacturerHasManyProduct"
        ],
        "summary": "Get Product count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinManufacturerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ManufacturerId",
            "in": "path",
            "description": "ID of parent Manufacturer",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/Manufacturer": {
      "post": {
        "tags": [
          "Manufacturer"
        ],
        "summary": "Add a new Manufacturer",
        "description": "",
        "operationId": "addManufacturer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Manufacturer object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Manufacturer"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "Manufacturer"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getManufacturer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Manufacturer/{ManufacturerId}": {
      "get": {
        "tags": [
          "Manufacturer"
        ],
        "summary": "Find Manufacturer by ID",
        "description": "Returns a single Manufacturer",
        "operationId": "getManufacturerById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ManufacturerId",
            "in": "path",
            "description": "ID of Manufacturer to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Manufacturer"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Manufacturer not found"
          }
        }
      },
      "put": {
        "tags": [
          "Manufacturer"
        ],
        "summary": "Updates a Manufacturer",
        "description": "",
        "operationId": "updateManufacturer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ManufacturerId",
            "in": "path",
            "description": "ID of Manufacturer to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Manufacturer object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Manufacturer"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "Manufacturer"
        ],
        "summary": "Deletes a Manufacturer",
        "description": "",
        "operationId": "deleteManufacturer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ManufacturerId",
            "in": "path",
            "description": "ID of Manufacturer to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Manufacturer not found"
          }
        }
      }
    },
    "/api/v1/Manufacturer/bulk": {
      "post": {
        "tags": [
          "Manufacturer"
        ],
        "summary": "Bulk Manufacturer insert",
        "description": "",
        "operationId": "bulkManufacturerInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Manufacturer objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Manufacturer"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "Manufacturer"
        ],
        "summary": "Updates a Manufacturer",
        "description": "",
        "operationId": "updateManufacturer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Manufacturer objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Manufacturer"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "Manufacturer"
        ],
        "summary": "Deletes a Manufacturer",
        "description": "",
        "operationId": "deleteManufacturer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Manufacturer objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Manufacturer"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Manufacturer not found"
          }
        }
      }
    },
    "/api/v1/Manufacturer/findOne": {
      "get": {
        "tags": [
          "Manufacturer"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneManufacturer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Manufacturer"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Manufacturer/{ManufacturerId}/exists": {
      "get": {
        "tags": [
          "Manufacturer"
        ],
        "summary": "Check Manufacturer with provided ID exists",
        "description": "Returns a single Manufacturer",
        "operationId": "checkManufacturerExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ManufacturerId",
            "in": "path",
            "description": "ID of Manufacturer",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/Manufacturer/count": {
      "get": {
        "tags": [
          "Manufacturer"
        ],
        "summary": "Get Manufacturer count",
        "operationId": "getManufacturerCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Manufacturer/groupby/{columnName}": {
      "get": {
        "tags": [
          "Manufacturer"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "ManufacturerGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Manufacturer"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Manufacturer/distribution/{columnName}": {
      "get": {
        "tags": [
          "Manufacturer"
        ],
        "summary": "",
        "description": "",
        "operationId": "ManufacturerDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Manufacturer/distinct/{columnName}": {
      "get": {
        "tags": [
          "Manufacturer"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "ManufacturerDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Manufacturer/aggregate/{columnName}": {
      "get": {
        "tags": [
          "Manufacturer"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "ManufacturerAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Manufacturer"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Product/belongs/Manufacturer": {
      "get": {
        "tags": [
          "ProductBelongsToManufacturer"
        ],
        "summary": "Get Product list with Manufacturer parent",
        "description": "",
        "operationId": "ProductWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/Product/belongs/ProductGroup": {
      "get": {
        "tags": [
          "ProductBelongsToProductGroup"
        ],
        "summary": "Get Product list with ProductGroup parent",
        "description": "",
        "operationId": "ProductWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/Product/belongs/ProductType": {
      "get": {
        "tags": [
          "ProductBelongsToProductType"
        ],
        "summary": "Get Product list with ProductType parent",
        "description": "",
        "operationId": "ProductWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/Product/belongs/Users": {
      "get": {
        "tags": [
          "ProductBelongsToUsers"
        ],
        "summary": "Get Product list with Users parent",
        "description": "",
        "operationId": "ProductWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/Product/has/ProductShop": {
      "get": {
        "tags": [
          "ProductHasManyProductShop"
        ],
        "summary": "Get Product list with ProductShop children",
        "description": "",
        "operationId": "ProductHasManyProductShopList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/Product/{ProductId}/ProductShop": {
      "get": {
        "tags": [
          "ProductHasManyProductShop"
        ],
        "summary": "Find ProductShop list by parent Product id",
        "description": "Returns a single Product",
        "operationId": "getProductShopByProductId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of Product to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "post": {
        "tags": [
          "ProductHasManyProductShop"
        ],
        "summary": "Insert ProductShop under a parent Product",
        "description": "Returns a single Product",
        "operationId": "insertProductShopByProductId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ProductShop object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of Product to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/Product/{ProductId}/ProductShop/{ProductShopId}": {
      "get": {
        "tags": [
          "ProductHasManyProductShop"
        ],
        "summary": "Get by ProductShop id parent Product id",
        "description": "Returns a single Product",
        "operationId": "getProductShopByIdAndProductId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of parent Product",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ProductShopId",
            "in": "path",
            "description": "ID of ProductShop",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProductHasManyProductShop"
        ],
        "summary": "Delete by ProductShop id parent Product id",
        "description": "Returns a single Product",
        "operationId": "deleteProductShopByIdAndProductId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of parent Product",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ProductShopId",
            "in": "path",
            "description": "ID of cProductShop",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "ProductHasManyProductShop"
        ],
        "summary": "Update ProductShop under a parent Product",
        "description": "Returns a single Product",
        "operationId": "updateProductShopByIdAndProductId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ProductShop object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of Product to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ProductShopId",
            "in": "path",
            "description": "ID of ProductShop",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/Product/{ProductId}/ProductShop/{ProductShopId}/exists": {
      "get": {
        "tags": [
          "ProductHasManyProductShop"
        ],
        "summary": "Check row exists by ProductShop id and parent Product id",
        "description": "",
        "operationId": "existsProductShopByIdAndProductId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of parent Product",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ProductShopId",
            "in": "path",
            "description": "ID of ProductShop",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/Product/{ProductId}/ProductShop/findOne": {
      "get": {
        "tags": [
          "ProductHasManyProductShop"
        ],
        "summary": "Find one ProductShop by parent Product id and filters",
        "description": "",
        "operationId": "findOneProductShopByProductId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of parent Product",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/Product/{ProductId}/ProductShop/count": {
      "get": {
        "tags": [
          "ProductHasManyProductShop"
        ],
        "summary": "Get ProductShop count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinProductId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of parent Product",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/Product": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Add a new Product",
        "description": "",
        "operationId": "addProduct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getProduct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Product/{ProductId}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Find Product by ID",
        "description": "Returns a single Product",
        "operationId": "getProductById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of Product to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Updates a Product",
        "description": "",
        "operationId": "updateProduct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of Product to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Product object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Deletes a Product",
        "description": "",
        "operationId": "deleteProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of Product to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/api/v1/Product/bulk": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Bulk Product insert",
        "description": "",
        "operationId": "bulkProductInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Updates a Product",
        "description": "",
        "operationId": "updateProduct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Deletes a Product",
        "description": "",
        "operationId": "deleteProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/api/v1/Product/findOne": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneProduct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Product/{ProductId}/exists": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Check Product with provided ID exists",
        "description": "Returns a single Product",
        "operationId": "checkProductExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of Product",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/Product/count": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get Product count",
        "operationId": "getProductCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Product/groupby/{columnName}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "ProductGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Product/distribution/{columnName}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "",
        "description": "",
        "operationId": "ProductDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Product/distinct/{columnName}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "ProductDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Product/aggregate/{columnName}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "ProductAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ProductGroup/has/Product": {
      "get": {
        "tags": [
          "ProductGroupHasManyProduct"
        ],
        "summary": "Get ProductGroup list with Product children",
        "description": "",
        "operationId": "ProductGroupHasManyProductList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/ProductGroup/{ProductGroupId}/Product": {
      "get": {
        "tags": [
          "ProductGroupHasManyProduct"
        ],
        "summary": "Find Product list by parent ProductGroup id",
        "description": "Returns a single ProductGroup",
        "operationId": "getProductByProductGroupId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductGroupId",
            "in": "path",
            "description": "ID of ProductGroup to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ProductGroup not found"
          }
        }
      },
      "post": {
        "tags": [
          "ProductGroupHasManyProduct"
        ],
        "summary": "Insert Product under a parent ProductGroup",
        "description": "Returns a single ProductGroup",
        "operationId": "insertProductByProductGroupId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "ProductGroupId",
            "in": "path",
            "description": "ID of ProductGroup to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ProductGroup/{ProductGroupId}/Product/{ProductId}": {
      "get": {
        "tags": [
          "ProductGroupHasManyProduct"
        ],
        "summary": "Get by Product id parent ProductGroup id",
        "description": "Returns a single ProductGroup",
        "operationId": "getProductByIdAndProductGroupId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductGroupId",
            "in": "path",
            "description": "ID of parent ProductGroup",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of Product",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProductGroupHasManyProduct"
        ],
        "summary": "Delete by Product id parent ProductGroup id",
        "description": "Returns a single ProductGroup",
        "operationId": "deleteProductByIdAndProductGroupId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductGroupId",
            "in": "path",
            "description": "ID of parent ProductGroup",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of cProduct",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "ProductGroupHasManyProduct"
        ],
        "summary": "Update Product under a parent ProductGroup",
        "description": "Returns a single ProductGroup",
        "operationId": "updateProductByIdAndProductGroupId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "ProductGroupId",
            "in": "path",
            "description": "ID of ProductGroup to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of Product",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ProductGroup/{ProductGroupId}/Product/{ProductId}/exists": {
      "get": {
        "tags": [
          "ProductGroupHasManyProduct"
        ],
        "summary": "Check row exists by Product id and parent ProductGroup id",
        "description": "",
        "operationId": "existsProductByIdAndProductGroupId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductGroupId",
            "in": "path",
            "description": "ID of parent ProductGroup",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of Product",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/ProductGroup/{ProductGroupId}/Product/findOne": {
      "get": {
        "tags": [
          "ProductGroupHasManyProduct"
        ],
        "summary": "Find one Product by parent ProductGroup id and filters",
        "description": "",
        "operationId": "findOneProductByProductGroupId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductGroupId",
            "in": "path",
            "description": "ID of parent ProductGroup",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ProductGroup/{ProductGroupId}/Product/count": {
      "get": {
        "tags": [
          "ProductGroupHasManyProduct"
        ],
        "summary": "Get Product count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinProductGroupId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductGroupId",
            "in": "path",
            "description": "ID of parent ProductGroup",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ProductGroup": {
      "post": {
        "tags": [
          "ProductGroup"
        ],
        "summary": "Add a new ProductGroup",
        "description": "",
        "operationId": "addProductGroup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ProductGroup object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductGroup"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "ProductGroup"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getProductGroup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ProductGroup/{ProductGroupId}": {
      "get": {
        "tags": [
          "ProductGroup"
        ],
        "summary": "Find ProductGroup by ID",
        "description": "Returns a single ProductGroup",
        "operationId": "getProductGroupById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductGroupId",
            "in": "path",
            "description": "ID of ProductGroup to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProductGroup"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ProductGroup not found"
          }
        }
      },
      "put": {
        "tags": [
          "ProductGroup"
        ],
        "summary": "Updates a ProductGroup",
        "description": "",
        "operationId": "updateProductGroup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductGroupId",
            "in": "path",
            "description": "ID of ProductGroup to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "ProductGroup object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductGroup"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "ProductGroup"
        ],
        "summary": "Deletes a ProductGroup",
        "description": "",
        "operationId": "deleteProductGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductGroupId",
            "in": "path",
            "description": "ID of ProductGroup to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ProductGroup not found"
          }
        }
      }
    },
    "/api/v1/ProductGroup/bulk": {
      "post": {
        "tags": [
          "ProductGroup"
        ],
        "summary": "Bulk ProductGroup insert",
        "description": "",
        "operationId": "bulkProductGroupInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ProductGroup objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductGroup"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "ProductGroup"
        ],
        "summary": "Updates a ProductGroup",
        "description": "",
        "operationId": "updateProductGroup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ProductGroup objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductGroup"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "ProductGroup"
        ],
        "summary": "Deletes a ProductGroup",
        "description": "",
        "operationId": "deleteProductGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ProductGroup objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductGroup"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ProductGroup not found"
          }
        }
      }
    },
    "/api/v1/ProductGroup/findOne": {
      "get": {
        "tags": [
          "ProductGroup"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneProductGroup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProductGroup"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ProductGroup/{ProductGroupId}/exists": {
      "get": {
        "tags": [
          "ProductGroup"
        ],
        "summary": "Check ProductGroup with provided ID exists",
        "description": "Returns a single ProductGroup",
        "operationId": "checkProductGroupExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductGroupId",
            "in": "path",
            "description": "ID of ProductGroup",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/ProductGroup/count": {
      "get": {
        "tags": [
          "ProductGroup"
        ],
        "summary": "Get ProductGroup count",
        "operationId": "getProductGroupCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ProductGroup/groupby/{columnName}": {
      "get": {
        "tags": [
          "ProductGroup"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "ProductGroupGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProductGroup"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ProductGroup/distribution/{columnName}": {
      "get": {
        "tags": [
          "ProductGroup"
        ],
        "summary": "",
        "description": "",
        "operationId": "ProductGroupDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ProductGroup/distinct/{columnName}": {
      "get": {
        "tags": [
          "ProductGroup"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "ProductGroupDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ProductGroup/aggregate/{columnName}": {
      "get": {
        "tags": [
          "ProductGroup"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "ProductGroupAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProductGroup"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ProductShop/belongs/Product": {
      "get": {
        "tags": [
          "ProductShopBelongsToProduct"
        ],
        "summary": "Get ProductShop list with Product parent",
        "description": "",
        "operationId": "ProductShopWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/ProductShop/belongs/Shops": {
      "get": {
        "tags": [
          "ProductShopBelongsToShops"
        ],
        "summary": "Get ProductShop list with Shops parent",
        "description": "",
        "operationId": "ProductShopWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/ProductShop": {
      "post": {
        "tags": [
          "ProductShop"
        ],
        "summary": "Add a new ProductShop",
        "description": "",
        "operationId": "addProductShop",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ProductShop object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductShop"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "ProductShop"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getProductShop",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ProductShop/{ProductShopId}": {
      "get": {
        "tags": [
          "ProductShop"
        ],
        "summary": "Find ProductShop by ID",
        "description": "Returns a single ProductShop",
        "operationId": "getProductShopById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductShopId",
            "in": "path",
            "description": "ID of ProductShop to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProductShop"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ProductShop not found"
          }
        }
      },
      "put": {
        "tags": [
          "ProductShop"
        ],
        "summary": "Updates a ProductShop",
        "description": "",
        "operationId": "updateProductShop",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductShopId",
            "in": "path",
            "description": "ID of ProductShop to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "ProductShop object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductShop"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "ProductShop"
        ],
        "summary": "Deletes a ProductShop",
        "description": "",
        "operationId": "deleteProductShop",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductShopId",
            "in": "path",
            "description": "ID of ProductShop to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ProductShop not found"
          }
        }
      }
    },
    "/api/v1/ProductShop/bulk": {
      "post": {
        "tags": [
          "ProductShop"
        ],
        "summary": "Bulk ProductShop insert",
        "description": "",
        "operationId": "bulkProductShopInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ProductShop objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductShop"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "ProductShop"
        ],
        "summary": "Updates a ProductShop",
        "description": "",
        "operationId": "updateProductShop",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ProductShop objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductShop"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "ProductShop"
        ],
        "summary": "Deletes a ProductShop",
        "description": "",
        "operationId": "deleteProductShop",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ProductShop objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductShop"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ProductShop not found"
          }
        }
      }
    },
    "/api/v1/ProductShop/findOne": {
      "get": {
        "tags": [
          "ProductShop"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneProductShop",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProductShop"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ProductShop/{ProductShopId}/exists": {
      "get": {
        "tags": [
          "ProductShop"
        ],
        "summary": "Check ProductShop with provided ID exists",
        "description": "Returns a single ProductShop",
        "operationId": "checkProductShopExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductShopId",
            "in": "path",
            "description": "ID of ProductShop",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/ProductShop/count": {
      "get": {
        "tags": [
          "ProductShop"
        ],
        "summary": "Get ProductShop count",
        "operationId": "getProductShopCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ProductShop/groupby/{columnName}": {
      "get": {
        "tags": [
          "ProductShop"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "ProductShopGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProductShop"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ProductShop/distribution/{columnName}": {
      "get": {
        "tags": [
          "ProductShop"
        ],
        "summary": "",
        "description": "",
        "operationId": "ProductShopDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ProductShop/distinct/{columnName}": {
      "get": {
        "tags": [
          "ProductShop"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "ProductShopDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ProductShop/aggregate/{columnName}": {
      "get": {
        "tags": [
          "ProductShop"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "ProductShopAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProductShop"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ProductType/has/Product": {
      "get": {
        "tags": [
          "ProductTypeHasManyProduct"
        ],
        "summary": "Get ProductType list with Product children",
        "description": "",
        "operationId": "ProductTypeHasManyProductList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/ProductType/{ProductTypeId}/Product": {
      "get": {
        "tags": [
          "ProductTypeHasManyProduct"
        ],
        "summary": "Find Product list by parent ProductType id",
        "description": "Returns a single ProductType",
        "operationId": "getProductByProductTypeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductTypeId",
            "in": "path",
            "description": "ID of ProductType to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ProductType not found"
          }
        }
      },
      "post": {
        "tags": [
          "ProductTypeHasManyProduct"
        ],
        "summary": "Insert Product under a parent ProductType",
        "description": "Returns a single ProductType",
        "operationId": "insertProductByProductTypeId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "ProductTypeId",
            "in": "path",
            "description": "ID of ProductType to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ProductType/{ProductTypeId}/Product/{ProductId}": {
      "get": {
        "tags": [
          "ProductTypeHasManyProduct"
        ],
        "summary": "Get by Product id parent ProductType id",
        "description": "Returns a single ProductType",
        "operationId": "getProductByIdAndProductTypeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductTypeId",
            "in": "path",
            "description": "ID of parent ProductType",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of Product",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProductTypeHasManyProduct"
        ],
        "summary": "Delete by Product id parent ProductType id",
        "description": "Returns a single ProductType",
        "operationId": "deleteProductByIdAndProductTypeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductTypeId",
            "in": "path",
            "description": "ID of parent ProductType",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of cProduct",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "ProductTypeHasManyProduct"
        ],
        "summary": "Update Product under a parent ProductType",
        "description": "Returns a single ProductType",
        "operationId": "updateProductByIdAndProductTypeId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "ProductTypeId",
            "in": "path",
            "description": "ID of ProductType to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of Product",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ProductType/{ProductTypeId}/Product/{ProductId}/exists": {
      "get": {
        "tags": [
          "ProductTypeHasManyProduct"
        ],
        "summary": "Check row exists by Product id and parent ProductType id",
        "description": "",
        "operationId": "existsProductByIdAndProductTypeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductTypeId",
            "in": "path",
            "description": "ID of parent ProductType",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of Product",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/ProductType/{ProductTypeId}/Product/findOne": {
      "get": {
        "tags": [
          "ProductTypeHasManyProduct"
        ],
        "summary": "Find one Product by parent ProductType id and filters",
        "description": "",
        "operationId": "findOneProductByProductTypeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductTypeId",
            "in": "path",
            "description": "ID of parent ProductType",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ProductType/{ProductTypeId}/Product/count": {
      "get": {
        "tags": [
          "ProductTypeHasManyProduct"
        ],
        "summary": "Get Product count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinProductTypeId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductTypeId",
            "in": "path",
            "description": "ID of parent ProductType",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ProductType": {
      "post": {
        "tags": [
          "ProductType"
        ],
        "summary": "Add a new ProductType",
        "description": "",
        "operationId": "addProductType",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ProductType object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductType"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "ProductType"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getProductType",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ProductType/{ProductTypeId}": {
      "get": {
        "tags": [
          "ProductType"
        ],
        "summary": "Find ProductType by ID",
        "description": "Returns a single ProductType",
        "operationId": "getProductTypeById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductTypeId",
            "in": "path",
            "description": "ID of ProductType to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProductType"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ProductType not found"
          }
        }
      },
      "put": {
        "tags": [
          "ProductType"
        ],
        "summary": "Updates a ProductType",
        "description": "",
        "operationId": "updateProductType",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductTypeId",
            "in": "path",
            "description": "ID of ProductType to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "ProductType object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductType"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "ProductType"
        ],
        "summary": "Deletes a ProductType",
        "description": "",
        "operationId": "deleteProductType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductTypeId",
            "in": "path",
            "description": "ID of ProductType to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ProductType not found"
          }
        }
      }
    },
    "/api/v1/ProductType/bulk": {
      "post": {
        "tags": [
          "ProductType"
        ],
        "summary": "Bulk ProductType insert",
        "description": "",
        "operationId": "bulkProductTypeInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ProductType objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductType"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "ProductType"
        ],
        "summary": "Updates a ProductType",
        "description": "",
        "operationId": "updateProductType",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ProductType objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductType"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "ProductType"
        ],
        "summary": "Deletes a ProductType",
        "description": "",
        "operationId": "deleteProductType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ProductType objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductType"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ProductType not found"
          }
        }
      }
    },
    "/api/v1/ProductType/findOne": {
      "get": {
        "tags": [
          "ProductType"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneProductType",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProductType"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ProductType/{ProductTypeId}/exists": {
      "get": {
        "tags": [
          "ProductType"
        ],
        "summary": "Check ProductType with provided ID exists",
        "description": "Returns a single ProductType",
        "operationId": "checkProductTypeExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProductTypeId",
            "in": "path",
            "description": "ID of ProductType",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/ProductType/count": {
      "get": {
        "tags": [
          "ProductType"
        ],
        "summary": "Get ProductType count",
        "operationId": "getProductTypeCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ProductType/groupby/{columnName}": {
      "get": {
        "tags": [
          "ProductType"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "ProductTypeGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProductType"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ProductType/distribution/{columnName}": {
      "get": {
        "tags": [
          "ProductType"
        ],
        "summary": "",
        "description": "",
        "operationId": "ProductTypeDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ProductType/distinct/{columnName}": {
      "get": {
        "tags": [
          "ProductType"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "ProductTypeDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ProductType/aggregate/{columnName}": {
      "get": {
        "tags": [
          "ProductType"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "ProductTypeAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProductType"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Shops/has/ProductShop": {
      "get": {
        "tags": [
          "ShopsHasManyProductShop"
        ],
        "summary": "Get Shops list with ProductShop children",
        "description": "",
        "operationId": "ShopsHasManyProductShopList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/Shops/{ShopsId}/ProductShop": {
      "get": {
        "tags": [
          "ShopsHasManyProductShop"
        ],
        "summary": "Find ProductShop list by parent Shops id",
        "description": "Returns a single Shops",
        "operationId": "getProductShopByShopsId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ShopsId",
            "in": "path",
            "description": "ID of Shops to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Shops not found"
          }
        }
      },
      "post": {
        "tags": [
          "ShopsHasManyProductShop"
        ],
        "summary": "Insert ProductShop under a parent Shops",
        "description": "Returns a single Shops",
        "operationId": "insertProductShopByShopsId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ProductShop object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "ShopsId",
            "in": "path",
            "description": "ID of Shops to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/Shops/{ShopsId}/ProductShop/{ProductShopId}": {
      "get": {
        "tags": [
          "ShopsHasManyProductShop"
        ],
        "summary": "Get by ProductShop id parent Shops id",
        "description": "Returns a single Shops",
        "operationId": "getProductShopByIdAndShopsId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ShopsId",
            "in": "path",
            "description": "ID of parent Shops",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ProductShopId",
            "in": "path",
            "description": "ID of ProductShop",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ShopsHasManyProductShop"
        ],
        "summary": "Delete by ProductShop id parent Shops id",
        "description": "Returns a single Shops",
        "operationId": "deleteProductShopByIdAndShopsId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ShopsId",
            "in": "path",
            "description": "ID of parent Shops",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ProductShopId",
            "in": "path",
            "description": "ID of cProductShop",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "ShopsHasManyProductShop"
        ],
        "summary": "Update ProductShop under a parent Shops",
        "description": "Returns a single Shops",
        "operationId": "updateProductShopByIdAndShopsId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ProductShop object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "ShopsId",
            "in": "path",
            "description": "ID of Shops to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ProductShopId",
            "in": "path",
            "description": "ID of ProductShop",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/Shops/{ShopsId}/ProductShop/{ProductShopId}/exists": {
      "get": {
        "tags": [
          "ShopsHasManyProductShop"
        ],
        "summary": "Check row exists by ProductShop id and parent Shops id",
        "description": "",
        "operationId": "existsProductShopByIdAndShopsId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ShopsId",
            "in": "path",
            "description": "ID of parent Shops",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ProductShopId",
            "in": "path",
            "description": "ID of ProductShop",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/Shops/{ShopsId}/ProductShop/findOne": {
      "get": {
        "tags": [
          "ShopsHasManyProductShop"
        ],
        "summary": "Find one ProductShop by parent Shops id and filters",
        "description": "",
        "operationId": "findOneProductShopByShopsId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ShopsId",
            "in": "path",
            "description": "ID of parent Shops",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/Shops/{ShopsId}/ProductShop/count": {
      "get": {
        "tags": [
          "ShopsHasManyProductShop"
        ],
        "summary": "Get ProductShop count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinShopsId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ShopsId",
            "in": "path",
            "description": "ID of parent Shops",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/Shops": {
      "post": {
        "tags": [
          "Shops"
        ],
        "summary": "Add a new Shops",
        "description": "",
        "operationId": "addShops",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Shops object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Shops"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "Shops"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getShops",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Shops/{ShopsId}": {
      "get": {
        "tags": [
          "Shops"
        ],
        "summary": "Find Shops by ID",
        "description": "Returns a single Shops",
        "operationId": "getShopsById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ShopsId",
            "in": "path",
            "description": "ID of Shops to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Shops"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Shops not found"
          }
        }
      },
      "put": {
        "tags": [
          "Shops"
        ],
        "summary": "Updates a Shops",
        "description": "",
        "operationId": "updateShops",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ShopsId",
            "in": "path",
            "description": "ID of Shops to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Shops object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Shops"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "Shops"
        ],
        "summary": "Deletes a Shops",
        "description": "",
        "operationId": "deleteShops",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ShopsId",
            "in": "path",
            "description": "ID of Shops to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Shops not found"
          }
        }
      }
    },
    "/api/v1/Shops/bulk": {
      "post": {
        "tags": [
          "Shops"
        ],
        "summary": "Bulk Shops insert",
        "description": "",
        "operationId": "bulkShopsInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Shops objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Shops"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "Shops"
        ],
        "summary": "Updates a Shops",
        "description": "",
        "operationId": "updateShops",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Shops objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Shops"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "Shops"
        ],
        "summary": "Deletes a Shops",
        "description": "",
        "operationId": "deleteShops",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Shops objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Shops"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Shops not found"
          }
        }
      }
    },
    "/api/v1/Shops/findOne": {
      "get": {
        "tags": [
          "Shops"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneShops",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Shops"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Shops/{ShopsId}/exists": {
      "get": {
        "tags": [
          "Shops"
        ],
        "summary": "Check Shops with provided ID exists",
        "description": "Returns a single Shops",
        "operationId": "checkShopsExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ShopsId",
            "in": "path",
            "description": "ID of Shops",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/Shops/count": {
      "get": {
        "tags": [
          "Shops"
        ],
        "summary": "Get Shops count",
        "operationId": "getShopsCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Shops/groupby/{columnName}": {
      "get": {
        "tags": [
          "Shops"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "ShopsGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Shops"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Shops/distribution/{columnName}": {
      "get": {
        "tags": [
          "Shops"
        ],
        "summary": "",
        "description": "",
        "operationId": "ShopsDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Shops/distinct/{columnName}": {
      "get": {
        "tags": [
          "Shops"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "ShopsDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Shops/aggregate/{columnName}": {
      "get": {
        "tags": [
          "Shops"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "ShopsAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Shops"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Users/has/Product": {
      "get": {
        "tags": [
          "UsersHasManyProduct"
        ],
        "summary": "Get Users list with Product children",
        "description": "",
        "operationId": "UsersHasManyProductList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/Users/{UsersId}/Product": {
      "get": {
        "tags": [
          "UsersHasManyProduct"
        ],
        "summary": "Find Product list by parent Users id",
        "description": "Returns a single Users",
        "operationId": "getProductByUsersId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "UsersId",
            "in": "path",
            "description": "ID of Users to return",
            "required": true,
            "type": "uniqueidentifier",
            "format": "uniqueidentifier"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Users not found"
          }
        }
      },
      "post": {
        "tags": [
          "UsersHasManyProduct"
        ],
        "summary": "Insert Product under a parent Users",
        "description": "Returns a single Users",
        "operationId": "insertProductByUsersId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "UsersId",
            "in": "path",
            "description": "ID of Users to return",
            "required": true,
            "type": "uniqueidentifier",
            "format": "uniqueidentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/Users/{UsersId}/Product/{ProductId}": {
      "get": {
        "tags": [
          "UsersHasManyProduct"
        ],
        "summary": "Get by Product id parent Users id",
        "description": "Returns a single Users",
        "operationId": "getProductByIdAndUsersId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "UsersId",
            "in": "path",
            "description": "ID of parent Users",
            "required": true,
            "type": "uniqueidentifier",
            "format": "uniqueidentifier"
          },
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of Product",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UsersHasManyProduct"
        ],
        "summary": "Delete by Product id parent Users id",
        "description": "Returns a single Users",
        "operationId": "deleteProductByIdAndUsersId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "uniqueidentifier",
            "in": "path",
            "description": "ID of parent Users",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of cProduct",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "UsersHasManyProduct"
        ],
        "summary": "Update Product under a parent Users",
        "description": "Returns a single Users",
        "operationId": "updateProductByIdAndUsersId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "UsersId",
            "in": "path",
            "description": "ID of Users to return",
            "required": true,
            "type": "uniqueidentifier",
            "format": "uniqueidentifier"
          },
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of Product",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/Users/{UsersId}/Product/{ProductId}/exists": {
      "get": {
        "tags": [
          "UsersHasManyProduct"
        ],
        "summary": "Check row exists by Product id and parent Users id",
        "description": "",
        "operationId": "existsProductByIdAndUsersId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "UsersId",
            "in": "path",
            "description": "ID of parent Users",
            "required": true,
            "type": "uniqueidentifier",
            "format": "uniqueidentifier"
          },
          {
            "name": "ProductId",
            "in": "path",
            "description": "ID of Product",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/Users/{UsersId}/Product/findOne": {
      "get": {
        "tags": [
          "UsersHasManyProduct"
        ],
        "summary": "Find one Product by parent Users id and filters",
        "description": "",
        "operationId": "findOneProductByUsersId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "UsersId",
            "in": "path",
            "description": "ID of parent Users",
            "required": true,
            "type": "uniqueidentifier",
            "format": "uniqueidentifier"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/Users/{UsersId}/Product/count": {
      "get": {
        "tags": [
          "UsersHasManyProduct"
        ],
        "summary": "Get Product count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinUsersId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "UsersId",
            "in": "path",
            "description": "ID of parent Users",
            "required": true,
            "type": "uniqueidentifier",
            "format": "uniqueidentifier"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/Users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add a new Users",
        "description": "",
        "operationId": "addUsers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Users object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getUsers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Users/{UsersId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Find Users by ID",
        "description": "Returns a single Users",
        "operationId": "getUsersById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "UsersId",
            "in": "path",
            "description": "ID of Users to return",
            "required": true,
            "type": "uniqueidentifier",
            "format": "uniqueidentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Users not found"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates a Users",
        "description": "",
        "operationId": "updateUsers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "UsersId",
            "in": "path",
            "description": "ID of Users to return",
            "required": true,
            "type": "uniqueidentifier",
            "format": "uniqueidentifier"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Users object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes a Users",
        "description": "",
        "operationId": "deleteUsers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "UsersId",
            "in": "path",
            "description": "ID of Users to return",
            "required": true,
            "type": "uniqueidentifier",
            "format": "uniqueidentifier"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Users not found"
          }
        }
      }
    },
    "/api/v1/Users/bulk": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Bulk Users insert",
        "description": "",
        "operationId": "bulkUsersInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Users objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Users"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates a Users",
        "description": "",
        "operationId": "updateUsers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Users objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Users"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes a Users",
        "description": "",
        "operationId": "deleteUsers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Users objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Users"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Users not found"
          }
        }
      }
    },
    "/api/v1/Users/findOne": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneUsers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Users/{UsersId}/exists": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Check Users with provided ID exists",
        "description": "Returns a single Users",
        "operationId": "checkUsersExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "UsersId",
            "in": "path",
            "description": "ID of Users",
            "required": true,
            "type": "uniqueidentifier",
            "format": "uniqueidentifier"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/Users/count": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Users count",
        "operationId": "getUsersCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Users/groupby/{columnName}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "UsersGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Users/distribution/{columnName}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "",
        "description": "",
        "operationId": "UsersDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Users/distinct/{columnName}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "UsersDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/Users/aggregate/{columnName}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "UsersAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    }
  },
  "definitions": {
    "userAuth": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "nullable": false,
          "example": "test@xgenecloud.com"
        },
        "password": {
          "type": "string",
          "format": "password",
          "nullable": false,
          "example": "password"
        }
      }
    },
    "user": {
      "allOf": [
        {
          "$ref": "#/definitions/userAuth"
        },
        {
          "type": "object",
          "properties": {
            "ID": {
              "type": "uniqueidentifier",
              "nullable": false,
              "readOnly": true
            },
            "firstname": {
              "type": "string",
              "nullable": false,
              "example": "FirstName"
            },
            "lastname": {
              "type": "string",
              "nullable": false,
              "example": "LastName"
            },
            "roles": {
              "type": "object",
              "readOnly": true
            },
            "email_verified": {
              "type": "boolean",
              "readOnly": true
            }
          }
        }
      ]
    },
    "Manufacturer": {
      "type": "object",
      "properties": {
        "ManufacturerID": {
          "type": "string",
          "nullable": false
        },
        "Name": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "Product": {
      "type": "object",
      "properties": {
        "ProductID": {
          "type": "string",
          "nullable": true
        },
        "Title": {
          "type": "string",
          "nullable": false
        },
        "Description": {
          "type": "string"
        },
        "Price": {
          "type": "integer",
          "nullable": false
        },
        "HaveOnStock": {
          "type": "integer",
          "nullable": false
        },
        "Quantity": {
          "type": "integer",
          "nullable": false
        },
        "Image": {
          "type": "string"
        },
        "Promo": {
          "type": "integer",
          "nullable": false
        },
        "Percentage": {
          "type": "integer"
        },
        "ManufacturerID": {
          "type": "string",
          "nullable": false
        },
        "ProductTypeID": {
          "type": "integer",
          "nullable": false
        },
        "ProductGroupID": {
          "type": "integer",
          "nullable": false
        },
        "IsDeleted": {
          "type": "integer",
          "nullable": false
        }
      }
    },
    "ProductGroup": {
      "type": "object",
      "properties": {
        "ProductGroupID": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "GroupName": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "ProductShop": {
      "type": "object",
      "properties": {
        "ProductShopID": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "ProductID": {
          "type": "string",
          "nullable": false
        },
        "ShopID": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "ProductType": {
      "type": "object",
      "properties": {
        "ProductTypeID": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "Name": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "Shops": {
      "type": "object",
      "properties": {
        "ShopID": {
          "type": "string",
          "nullable": false
        },
        "Status": {
          "type": "integer",
          "nullable": false
        },
        "Name": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "Users": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "nullable": false
        },
        "FirstName": {
          "type": "string",
          "nullable": false
        },
        "LastName": {
          "type": "string",
          "nullable": false
        },
        "Password": {
          "type": "string",
          "nullable": false
        },
        "Email": {
          "type": "string",
          "nullable": false
        },
        "Image": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about XgeneCloud",
    "url": "http://xgenecloud.com"
  }
}